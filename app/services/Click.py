import hashlib
import time
import json
import logging
from typing import Optional, Dict, Any, Literal
from decimal import Decimal
from datetime import datetime
import requests
from requests.exceptions import Timeout, RequestException
from enum import Enum


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class PaymentStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
    PENDING = "pending"
    WAITING = "waiting"
    CONFIRMED = "confirmed"
    REJECTED = "rejected"
    ERROR = "error"
    CANCELLED = "cancelled"


class ClickPaymentProvider:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Click.uz Payment API
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        provider = ClickPaymentProvider(
            merchant_id="12345",
            merchant_service_id="67890",
            merchant_user_id="11111",
            secret_key="your_secret_key"
        )
    """
    
    API_ENDPOINT = "https://api.click.uz/v2/merchant"
    PAYMENT_URL = "https://my.click.uz/pay/"
    
    def __init__(
        self,
        merchant_id: str,
        merchant_service_id: str,
        merchant_user_id: str,
        secret_key: str,
        timeout: int = 30,  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        max_retries: int = 0  # –ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    ):
        self.merchant_id = merchant_id
        self.merchant_service_id = merchant_service_id
        self.merchant_user_id = merchant_user_id
        self.secret_key = secret_key
        self.timeout = timeout
        self.max_retries = max_retries
        
        logger.info(f"ClickPaymentProvider initialized: merchant_id={merchant_id}, service_id={merchant_service_id}, timeout={timeout}s")
    
    def _generate_auth_token(self, timestamp: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        string = f"{timestamp}{self.secret_key}"
        token = hashlib.sha1(string.encode('utf-8')).hexdigest()
        logger.debug(f"Generated auth token for timestamp={timestamp}")
        return token
    
    def _get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        timestamp = int(time.time())
        token = self._generate_auth_token(timestamp)
        
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Auth': f'{self.merchant_user_id}:{token}:{timestamp}'
        }
        
        logger.debug(f"Generated headers with timestamp={timestamp}")
        return headers
    
    def _make_request(
        self,
        method: Literal["GET", "POST", "DELETE"],
        endpoint: str,
        data: Optional[Dict] = None,
        retry_count: int = 0
    ) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        url = f"{self.API_ENDPOINT}{endpoint}"
        headers = self._get_headers()
        
        logger.info(f"üì§ {method} {endpoint}")
        if data:
            logger.debug(f"Request data: {json.dumps(data, ensure_ascii=False, indent=2)}")
        
        start_time = time.time()
        
        logger.info(f"Request URL: {url}, data: {json.dumps(data, ensure_ascii=False, indent=2)}, headers: {json.dumps(headers, ensure_ascii=False, indent=2)}")
        try:
            if method == "GET":
                response = requests.get(url, headers=headers) #timeout=self.timeout)
            elif method == "POST":
                response = requests.post(url, json=data, headers=headers) #timeout=self.timeout)
            elif method == "DELETE":
                response = requests.delete(url, headers=headers) #timeout=self.timeout)
            
            elapsed_time = time.time() - start_time
            logger.info(f"‚úÖ Request completed in {elapsed_time:.2f}s | Status: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    logger.info(f"üì• Response: {json.dumps(result, ensure_ascii=False, indent=2)}")
                    return result
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå JSON decode error: {str(e)}")
                    return {
                        'error': -500,
                        'error_note': f'Invalid JSON response: {response.text[:200]}'
                    }
            else:
                error_text = response.text[:500]
                logger.error(f"‚ùå HTTP {response.status_code}: {error_text}")
                return {
                    'error': -1 * response.status_code,
                    'error_note': f'HTTP error [{response.status_code}]',
                    'response_text': error_text
                }
                
        except Timeout as e:
            elapsed_time = time.time() - start_time
            logger.error(f"‚è±Ô∏è TIMEOUT after {elapsed_time:.2f}s | {method} {endpoint}")
            
            # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if retry_count < self.max_retries:
                wait_time = 2 ** retry_count
                logger.warning(f"üîÑ Retry {retry_count + 1}/{self.max_retries} after {wait_time}s...")
                time.sleep(wait_time)
                return self._make_request(method, endpoint, data, retry_count + 1)
            
            return {
                'error': -408,
                'error_note': f'Request timeout after {elapsed_time:.2f}s',
                'timeout': True,
                'suggestion': 'Check if request was processed on Click side'
            }
            
        except RequestException as e:
            elapsed_time = time.time() - start_time
            logger.error(f"‚ùå Request error after {elapsed_time:.2f}s: {type(e).__name__} - {str(e)}")
            
            # Retry –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if retry_count < self.max_retries:
                wait_time = 2 ** retry_count
                logger.warning(f"üîÑ Retry {retry_count + 1}/{self.max_retries} after {wait_time}s...")
                time.sleep(wait_time)
                return self._make_request(method, endpoint, data, retry_count + 1)
            
            return {
                'error': -1,
                'error_note': f'Request exception: {str(e)}',
                'exception_type': type(e).__name__
            }
            
        except Exception as e:
            elapsed_time = time.time() - start_time
            logger.exception(f"üí• Unexpected error after {elapsed_time:.2f}s")
            return {
                'error': -500,
                'error_note': f'Unexpected exception: {str(e)}',
                'exception_type': type(e).__name__
            }
    
    # ============= INVOICE –ú–ï–¢–û–î–´ =============
    
    def create_invoice(
        self,
        amount: float,
        phone_number: str,
        merchant_trans_id: str
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (998XXXXXXXXX)
            merchant_trans_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ—Ä—á–∞–Ω—Ç–∞
        """
        logger.info(f"üí≥ Creating invoice | amount={amount} | phone={phone_number} | trans_id={merchant_trans_id}")
        
        data = {
            'service_id': self.merchant_service_id,
            'amount': float(amount),
            'phone_number': phone_number,
            'merchant_trans_id': merchant_trans_id
        }
        
        result = self._make_request("POST", "/invoice/create", data)
        
        if result.get('error_code') == 0:
            invoice_id = result.get('invoice_id')
            logger.info(f"‚úÖ Invoice created successfully: invoice_id={invoice_id}")
        elif result.get('timeout'):
            logger.warning(f"‚ö†Ô∏è Invoice creation TIMEOUT! trans_id={merchant_trans_id}")
            logger.warning(f"üí° Suggestion: Check invoice status manually or wait for webhook")
        else:
            error_code = result.get('error_code', result.get('error'))
            error_note = result.get('error_note', '')
            logger.error(f"‚ùå Invoice creation failed: error={error_code}, note={error_note}")
        
        return result
    
    def check_invoice_status(self, invoice_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞
        
        Args:
            invoice_id: ID –∏–Ω–≤–æ–π—Å–∞ Click
        """
        logger.info(f"üîç Checking invoice status: invoice_id={invoice_id}")
        
        endpoint = f"/invoice/status/{self.merchant_service_id}/{invoice_id}"
        result = self._make_request("GET", endpoint)
        
        if result.get('status') is not None:
            status = result['status']
            status_note = result.get('status_note', '')
            
            if status > 0:
                logger.info(f"‚úÖ Invoice {invoice_id} CONFIRMED | status={status}")
            elif status == -99:
                logger.warning(f"‚ö†Ô∏è Invoice {invoice_id} REJECTED | status={status}")
            elif status < 0:
                logger.error(f"‚ùå Invoice {invoice_id} ERROR | status={status} | {status_note}")
            else:
                logger.info(f"‚è≥ Invoice {invoice_id} PENDING | status={status}")
        
        return result
    
    # ============= CARD TOKEN –ú–ï–¢–û–î–´ =============
    
    def create_card_token(
        self,
        card_number: str,
        expire_date: str,
        temporary: int = 0
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∫–∞—Ä—Ç—ã
        
        Args:
            card_number: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä)
            expire_date: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (MMYY)
            temporary: 0 - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, 1 - –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        """
        masked_card = f"{card_number[:4]}****{card_number[-4:]}"
        logger.info(f"üí≥ Creating card token | card={masked_card} | expire={expire_date} | temporary={temporary}")
        
        data = {
            'service_id': self.merchant_service_id,
            'card_number': card_number,
            'expire_date': expire_date,
            'temporary': temporary
        }
        
        result = self._make_request("POST", "/card_token/request", data)
        
        if result.get('error_code') == 0:
            card_token = result.get('card_token')
            phone_number = result.get('phone_number', 'N/A')
            logger.info(f"‚úÖ Card token created | token={card_token} | phone={phone_number}")
        elif result.get('timeout'):
            logger.warning(f"‚ö†Ô∏è Card token creation TIMEOUT! card={masked_card}")
            logger.warning(f"üí° Wait for SMS code, then verify manually")
        else:
            error_code = result.get('error_code', result.get('error'))
            error_note = result.get('error_note', '')
            logger.error(f"‚ùå Card token creation failed: error={error_code}, note={error_note}")
        
        return result
    
    def verify_card_token(
        self,
        card_token: str,
        sms_code: str
    ) -> Dict[str, Any]:
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∫–∞—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é SMS –∫–æ–¥–∞
        
        Args:
            card_token: –¢–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã
            sms_code: SMS –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        logger.info(f"üîê Verifying card token | token={card_token} | sms=***")
        
        data = {
            'service_id': self.merchant_service_id,
            'card_token': card_token,
            'sms_code': sms_code
        }
        
        result = self._make_request("POST", "/card_token/verify", data)
        
        if result.get('error_code') == 0:
            logger.info(f"‚úÖ Card token verified successfully")
        else:
            error_code = result.get('error_code', result.get('error'))
            error_note = result.get('error_note', '')
            logger.error(f"‚ùå Card token verification failed: error={error_code}, note={error_note}")
        
        return result
    
    def payment_with_token(
        self,
        card_token: str,
        amount: float,
        merchant_trans_id: str
    ) -> Dict[str, Any]:
        """
        –û–ø–ª–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∫–∞—Ä—Ç—ã
        
        Args:
            card_token: –¢–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            merchant_trans_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ—Ä—á–∞–Ω—Ç–∞
        """
        logger.info(f"üí∞ Payment with token | token={card_token} | amount={amount} | trans_id={merchant_trans_id}")
        
        data = {
            'service_id': self.merchant_service_id,
            'card_token': card_token,
            'amount': float(amount),
            'transaction_parameter': merchant_trans_id
        }
        
        result = self._make_request("POST", "/card_token/payment", data)
        
        if result.get('error_code') == 0:
            payment_id = result.get('payment_id')
            logger.info(f"‚úÖ Payment successful | payment_id={payment_id}")
        elif result.get('timeout'):
            logger.warning(f"‚ö†Ô∏è Payment TIMEOUT! trans_id={merchant_trans_id}")
            logger.warning(f"üí° Check payment status or wait for webhook")
        else:
            error_code = result.get('error_code', result.get('error'))
            error_note = result.get('error_note', '')
            logger.error(f"‚ùå Payment failed: error={error_code}, note={error_note}")
        
        return result
    
    def delete_card_token(self, card_token: str) -> Dict[str, Any]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∫–∞—Ä—Ç—ã
        
        Args:
            card_token: –¢–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        logger.info(f"üóëÔ∏è Deleting card token: {card_token}")
        
        endpoint = f"/card_token/{self.merchant_service_id}/{card_token}"
        result = self._make_request("DELETE", endpoint)
        
        if result.get('error_code') == 0:
            logger.info(f"‚úÖ Card token deleted successfully")
        else:
            error_code = result.get('error_code', result.get('error'))
            error_note = result.get('error_note', '')
            logger.error(f"‚ùå Card token deletion failed: error={error_code}, note={error_note}")
        
        return result
    
    # ============= WEBHOOK –ú–ï–¢–û–î–´ =============
    
    def verify_webhook_signature(
        self,
        click_trans_id: str,
        service_id: str,
        order_id: str,
        merchant_prepare_id: str,
        amount: str,
        action: str,
        sign_time: str,
        sign_string: str
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Click
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        expected_string = (
            f"{click_trans_id}{service_id}{self.secret_key}"
            f"{order_id}{merchant_prepare_id}{amount}{action}{sign_time}"
        )
        expected_signature = hashlib.md5(expected_string.encode('utf-8')).hexdigest()
        
        is_valid = expected_signature == sign_string
        
        if is_valid:
            logger.info(f"‚úÖ Webhook signature valid | order_id={order_id}")
        else:
            logger.error(f"‚ùå Webhook signature INVALID | order_id={order_id}")
            logger.debug(f"Expected: {expected_signature}")
            logger.debug(f"Got: {sign_string}")
        
        return is_valid
    
    def validate_webhook_data(
        self,
        webhook_data: Dict[str, Any],
        expected_amount: float,
        payment_status: str
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö webhook
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏ 'error' –∏ 'error_note'
        """
        order_id = webhook_data.get('merchant_trans_id', 'unknown')
        action = webhook_data.get('action', 'unknown')
        action_name = 'PREPARE' if action == '0' else 'COMPLETE' if action == '1' else 'UNKNOWN'
        
        logger.info(f"üîç Validating webhook | order_id={order_id} | action={action_name}")
        logger.debug(f"Webhook data: {json.dumps(webhook_data, ensure_ascii=False, indent=2)}")
        
        required_fields = [
            'click_trans_id', 'service_id', 'click_paydoc_id',
            'amount', 'action', 'error', 'error_note',
            'sign_time', 'sign_string', 'merchant_trans_id'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        missing_fields = [field for field in required_fields if field not in webhook_data]
        if missing_fields:
            logger.error(f"‚ùå Missing fields: {missing_fields}")
            return {
                'error': '-8',
                'error_note': 'Error in request from Click'
            }
        
        if action == '1' and 'merchant_prepare_id' not in webhook_data:
            logger.error("‚ùå Missing merchant_prepare_id for COMPLETE")
            return {
                'error': '-8',
                'error_note': 'Error in request from Click'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        merchant_prepare_id = webhook_data.get('merchant_prepare_id', '')
        if not self.verify_webhook_signature(
            webhook_data['click_trans_id'],
            webhook_data['service_id'],
            webhook_data['merchant_trans_id'],
            merchant_prepare_id,
            webhook_data['amount'],
            webhook_data['action'],
            webhook_data['sign_time'],
            webhook_data['sign_string']
        ):
            return {
                'error': '-1',
                'error_note': 'SIGN CHECK FAILED!'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ action
        if action not in ['0', '1']:
            logger.error(f"‚ùå Invalid action: {action}")
            return {
                'error': '-3',
                'error_note': 'Action not found'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
        webhook_amount = float(webhook_data['amount'])
        if abs(webhook_amount - float(expected_amount)) > 0.01:
            logger.error(f"‚ùå Amount mismatch | expected={expected_amount}, got={webhook_amount}")
            return {
                'error': '-2',
                'error_note': 'Incorrect parameter amount'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
        if payment_status == PaymentStatus.CONFIRMED:
            logger.warning(f"‚ö†Ô∏è Already paid | order_id={order_id}")
            return {
                'error': '-4',
                'error_note': 'Already paid'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è complete
        if action == '1':
            if order_id != merchant_prepare_id:
                logger.error(f"‚ùå ID mismatch | order={order_id}, prepare={merchant_prepare_id}")
                return {
                    'error': '-6',
                    'error_note': 'Transaction not found'
                }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        error = int(webhook_data.get('error', 0))
        if payment_status == PaymentStatus.REJECTED or error < 0:
            logger.warning(f"‚ö†Ô∏è Transaction cancelled | order_id={order_id}, error={error}")
            return {
                'error': '-9',
                'error_note': 'Transaction cancelled'
            }
        
        logger.info(f"‚úÖ Webhook validation successful | order_id={order_id}")
        return {
            'error': '0',
            'error_note': 'Success'
        }
    
    # ============= PAYMENT FORM –ú–ï–¢–û–î–´ =============
    
    def generate_payment_form_data(
        self,
        amount: float,
        transaction_id: str,
        description: str = "",
        email: str = "",
        return_url: str = "/"
    ) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã Click
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ñ–æ—Ä–º—ã (hidden inputs)
        """
        logger.info(f"üìù Generating payment form | amount={amount} | trans_id={transaction_id}")
        
        sign_time = datetime.now().strftime('%Y-%m-%d')
        sign_string = self._generate_form_signature(
            sign_time, transaction_id, amount
        )
        
        form_data = {
            'action_url': self.PAYMENT_URL,
            'MERCHANT_TRANS_AMOUNT': str(amount),
            'MERCHANT_ID': self.merchant_id,
            'MERCHANT_USER_ID': self.merchant_user_id,
            'MERCHANT_SERVICE_ID': self.merchant_service_id,
            'MERCHANT_TRANS_ID': transaction_id,
            'MERCHANT_TRANS_NOTE': description,
            'MERCHANT_USER_EMAIL': email,
            'SIGN_TIME': sign_time,
            'SIGN_STRING': sign_string,
            'RETURN_URL': return_url
        }
        
        logger.debug(f"Form data: {json.dumps(form_data, ensure_ascii=False, indent=2)}")
        return form_data
    
    def _generate_form_signature(
        self,
        sign_time: str,
        transaction_id: str,
        amount: float
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã"""
        string = (
            f"{sign_time}{self.secret_key}{self.merchant_service_id}"
            f"{transaction_id}{amount}"
        )
        signature = hashlib.md5(string.encode('utf-8')).hexdigest()
        logger.debug(f"Generated form signature for trans_id={transaction_id}")
        return signature